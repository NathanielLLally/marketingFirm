CREATE OR REPLACE FUNCTION mx.after_status_insert_trigger_function()
RETURNS trigger AS
$$
  use Data::Dumper;

  my $new_row = $_TD->{new};
  warn( Dumper(\$new_row) );

  if (exists $new_row->{qid} and defined $new_row->{qid}) {
    return;
  }

  $SIG{CHLD} = "IGNORE";

  my $pid = fork();

  if ($pid == 0) {
    `/var/lib/pgsql/data/smtp_status.pl`;
  }
  return; # Return is ignored for AFTER triggers
$$
LANGUAGE plperlu;


CREATE or REPLACE FUNCTION mx.mxdomain(mx text) RETURNS varchar
    LANGUAGE plperlu
    IMMUTABLE STRICT
    AS $_X$
use Data::Dumper;

my %tld = map { $_ => 1; } qw/com org net int edu gov mil/;
#warn Dumper(\%tld);

#  ip address
#
if ($_[0] =~ /^((\d+)\.?)+$/) {
  return $_[0];
}

my @parts = reverse split(/\./,(lc $_[0]));

my $d = join('.',$parts[1],$parts[0]);
if (exists $tld{$parts[1]}) {
 $d = join('.',$parts[2],$d);
}

return $d;
$_X$;

CREATE OR REPLACE FUNCTION mx.classify_smtp_status(status text)
RETURNS varchar
    IMMUTABLE STRICT
AS $$

  use Email::Find;

  my @pertainsToUser = ( 'mailbox', 'no such user', 'relay', 'recipient', 'does not exist', 'address rejected');
  my @interesting = ('dkim', 'spf', 'rbl', 'blocked', 'junkmail', 'spam', 'black list', 'reputation', 'unsolicited');
  my @mailservers = qw/obiseo.net 147.93.146.52 accurateleadinfo.com 144.91.96.230 leadtinfo.com 173.212.235.5 winblows98.com 194.180.176.214/;

  my $finder = Email::Find->new(sub{});
  my $status;
  my $enhanced;
  my $dc = $_[0];
  my $emailCount = $finder->find(\$dc);

  if ($dc =~ /(.*?); ?(\d{3,})/) {
    $status = $2;
    } else {
    #	print "no status: $dc\n";
    }

    if ($dc =~ /[- ](\d\.\d\.\d+)[^\.\d]+/) {
      $enhanced = $1;
      #			print "enhanced = $enhanced\n";
      } else {
      #			print "$dc\n";
      }

      #https://en.wikipedia.org/wiki/List_of_SMTP_server_return_codes
      #
      #5.4.310 dns - domain doesnt exist
      #
      #5.7.1
      #5.7.13 sender email account disabled
      #5.7.129 either not no white list or is on blacklist
      #5.7.133 exchange auth to group
      #5.7.134 -microsoft - could be spam or settings
      #5.7.193 not memeber of microsoft teams
      #5.7.23 spf ip fail
      #5.7.27 spf fail
      #5.7.26 unauth - dkim or spf etc..
      if (defined $enhanced and $enhanced =~ /(\d)\.(\d)\.(\d+)/) {
        my $class = $1;
        my $subject = $2;
        my $detail = $3;
        if ($class == 5) {
          if ($subject =~ /[01234]/) {
            return "user block code [$enhanced]";

          } elsif ($subject == 7 and $detail !~ /(129|133|134|193)/) {
            return "domain block code [$enhanced]";
          }
        }
      }
      my $ppD = join('|',@interesting);
      #$ppD = join('|', @mailservers);
      #$ppD =~ s/\./\\\./g;
      my $reD = qr/($ppD)/;
      if ($dc =~ /$reD/) {
        return "domain block regex";
      }

      my $ppU = join('|',@pertainsToUser);
      my $reU = qr/($ppU)/;
      if ($dc =~ /$reU/ or $emailCount > 0) {
        if ($emailCount > 0) {
#          return "user block has email";
        } else {
          return "user block regex";
        }
      }
    return;
$$
LANGUAGE plperlu;




--
-- PostgreSQL database dump
--

-- Dumped from database version 13.20
-- Dumped by pg_dump version 16.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: smtp_status; Type: TABLE; Schema: mx; Owner: postgres
--

CREATE TABLE mx.smtp_status (
    id integer NOT NULL,
    status character varying(2000),
    updated timestamp with time zone DEFAULT now(),
    qid character varying(80),
    addr character varying(255),
    mx character varying(255),
    mxdomain character varying(255) GENERATED ALWAYS AS (mx.mxdomain((mx)::text)) STORED,
    status_bounce character varying(80) GENERATED ALWAYS AS (mx.classify_smtp_status((status)::text)) STORED,
    result character varying(20)
);


ALTER TABLE mx.smtp_status OWNER TO postgres;

--
-- Name: smtp_status_id_seq; Type: SEQUENCE; Schema: mx; Owner: postgres
--

ALTER TABLE mx.smtp_status ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME mx.smtp_status_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: smtp_status smtp_status_pkey; Type: CONSTRAINT; Schema: mx; Owner: postgres
--

ALTER TABLE ONLY mx.smtp_status
    ADD CONSTRAINT smtp_status_pkey PRIMARY KEY (id);


--
-- Name: smtp_status smtp_status_qid_unique; Type: CONSTRAINT; Schema: mx; Owner: postgres
--

ALTER TABLE ONLY mx.smtp_status
    ADD CONSTRAINT smtp_status_qid_unique UNIQUE (qid);


--
-- Name: smtp_status after_status_insert_trigger; Type: TRIGGER; Schema: mx; Owner: postgres
--

CREATE TRIGGER after_status_insert_trigger AFTER INSERT ON mx.smtp_status FOR EACH ROW EXECUTE FUNCTION mx.after_status_insert_trigger_function();


--
-- PostgreSQL database dump complete
--

--
-- Name: rate_limits; Type: TABLE; Schema: mx; Owner: postgres
--

CREATE TABLE mx.rate_limits (
    id integer NOT NULL,
    domain character varying(255),
    "limit" integer
);


ALTER TABLE mx.rate_limits OWNER TO postgres;

--
-- Name: rate_limits_id_seq; Type: SEQUENCE; Schema: mx; Owner: postgres
--

ALTER TABLE mx.rate_limits ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME mx.rate_limits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: rate_limits; Type: TABLE DATA; Schema: mx; Owner: postgres
--

COPY mx.rate_limits (id, domain, "limit") FROM stdin;
1	leadtinfo.com	2
2	google.com	49
3	outlook.com	49
\.


--
-- Name: rate_limits_id_seq; Type: SEQUENCE SET; Schema: mx; Owner: postgres
--

SELECT pg_catalog.setval('mx.rate_limits_id_seq', 3, true);


--
-- Name: rate_limits rate_limits_domain_key; Type: CONSTRAINT; Schema: mx; Owner: postgres
--

ALTER TABLE ONLY mx.rate_limits
    ADD CONSTRAINT rate_limits_domain_key UNIQUE (domain);


--
-- Name: rate_limits rate_limits_pkey; Type: CONSTRAINT; Schema: mx; Owner: postgres
--

ALTER TABLE ONLY mx.rate_limits
    ADD CONSTRAINT rate_limits_pkey PRIMARY KEY (id);


--
-- PostgreSQL database dump complete
--

